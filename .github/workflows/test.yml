name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2                           # Set this to your preferred AWS region
  ECR_REPOSITORY: devops-static                    # Set this to your Amazon ECR repository name
  ECS_SERVICE: devops-static-website               # Set this to your Amazon ECS service name
  ECS_CLUSTER: devops-static                       # Set this to your Amazon ECS cluster name
  CONTAINER_NAME: devops-static                    # Name of the container in your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR for ECS deployment
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Register new task definition
        id: register-task
        run: |
          aws ecs register-task-definition \
            --family $ECS_SERVICE \
            --container-definitions "[{
              \"name\": \"$CONTAINER_NAME\",
              \"image\": \"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\",
              \"memory\": 512,
              \"cpu\": 256,
              \"essential\": true,
              \"portMappings\": [{
                \"containerPort\": 80,
                \"hostPort\": 80,
                \"protocol\": \"tcp\"
              }]
            }]" \
            --region $AWS_REGION

      - name: Check if ECS service exists
        id: check-service
        run: |
          SERVICE_INFO=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION --query "services[0]" --output json)
          echo "service_info=$SERVICE_INFO" >> $GITHUB_ENV

      - name: Create or update ECS service
        run: |
          SERVICE_STATUS=$(echo "${{ env.service_info }}" | jq -r '.status')
          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Updating ECS service..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --force-new-deployment \
              --region $AWS_REGION
          else
            if [ -z "${{ env.service_info }}" ] || [ "$SERVICE_STATUS" == "DRAINING" ]; then
              echo "Creating ECS service..."
              aws ecs create-service \
                --cluster $ECS_CLUSTER \
                --service-name $ECS_SERVICE \
                --task-definition $ECS_SERVICE \
                --desired-count 1 \
                --launch-type EC2 \
                --region $AWS_REGION
            else
              echo "Service is not active, status is: $SERVICE_STATUS"
              exit 1
            fi
          fi
